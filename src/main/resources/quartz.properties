#===============================================================
#配置主调度程序的属性
#===============================================================
org.quartz.scheduler.instanceName = quartzScheduler
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
#当检查某个Trigger应该触发时，默认每次只Acquire一个Trigger，（为什么要有Acquire的过程呢？是为了防止多线程访问的情况下，
#同一个Trigger被不同的线程多次触发）。尤其是使用JDBC JobStore时，一次Acquire就是一个update语句，尽可能一次性的多获取
#几个Trigger，一起触发，当定时器数量非常大的时候，这是个非常有效的优化。当定时器数量比较少时，触发不是极为频繁时，
#这个优化的意义就不大了。

#===============================================================
#配置线程池的属性
#===============================================================
# 线程池的线程数，即最多3个任务同时跑
org.quartz.threadPool.threadCount = 30
org.quartz.threadPool.threadPriority = 5
#自创建父线程
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

#===============================================================
#配置JobStore的属性
#===============================================================
org.quartz.jobStore.misfireThreshold = 60000
# 如何存储任务和触发器等信息
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
#加入集群
# org.quartz.jobStore.isClustered = true
#调度实例失效的检查时间间隔
#org.quartz.jobStore.clusterCheckinInterval=10000
# 驱动代理
#org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 表前缀
#org.quartz.jobStore.tablePrefix = qrtz_
# 数据源
#org.quartz.jobStore.dataSource = quartzDataSource
# 是否集群
#org.quartz.jobStore.isClustered = false


